#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# this file keeps all the properties for different Log4J1 integration tests
# just use proper prefix and refer to it in given test

# test for plain FileAppender

builtin.file.log4j2.appender.file.type = File
builtin.file.log4j2.appender.file.name = file
builtin.file.log4j2.appender.file.fileName = target/logs-log4j2/file-appender.log
builtin.file.log4j2.appender.file.layout.type = PatternLayout
builtin.file.log4j2.appender.file.layout.pattern = %c/%C [%p] %m%n

builtin.file.log4j2.rootLogger.level = info
builtin.file.log4j2.rootLogger.appenderRef.file.ref = file

# test for MDCSiftingAppender with arbitrary key

mdc.appender2.log4j2.appender.sift.name = sift
# org.apache.logging.log4j.core.appender.routing.RoutingAppender
mdc.appender2.log4j2.appender.sift.type = Routing
# org.apache.logging.log4j.core.appender.routing.Routes
mdc.appender2.log4j2.appender.sift.routes.type = Routes
mdc.appender2.log4j2.appender.sift.routes.pattern = ${ctx:my.key}
# "sift" is one of the Route elelemnts inside Routes. There's no key, thus the route is default
mdc.appender2.log4j2.appender.sift.routes.sift.type = Route
# dynamic declaration of the appender - to resolve file name using the map
mdc.appender2.log4j2.appender.sift.routes.sift.appender.type = File
mdc.appender2.log4j2.appender.sift.routes.sift.appender.name = dynamic-file
mdc.appender2.log4j2.appender.sift.routes.sift.appender.fileName = target/logs-log4j2/${ctx:my.key}-file-appender.log
mdc.appender2.log4j2.appender.sift.routes.sift.appender.layout.type = PatternLayout
mdc.appender2.log4j2.appender.sift.routes.sift.appender.layout.pattern = %c/%C [%p] %m%n
# another Route in Routes - with key "${ctx:my.key}" (thus non default from the point of view of RoutingAppender
# but actually a default from user point of view - used when there's no my.key in MDC). It's a kind of trick when
# "${ctx:my.key}" resolves back to "${ctx:my.key}" (when there's no key in MDC).
mdc.appender2.log4j2.appender.sift.routes.default.type = Route
mdc.appender2.log4j2.appender.sift.routes.default.key = ${ctx:my.key}
# static reference to appender
mdc.appender2.log4j2.appender.sift.routes.default.ref = file

# normal appender that may be referenced from logger or from the route above
mdc.appender2.log4j2.appender.file.type = File
mdc.appender2.log4j2.appender.file.name = file
mdc.appender2.log4j2.appender.file.fileName = target/logs-log4j2/default-file-appender.log
mdc.appender2.log4j2.appender.file.layout.type = PatternLayout
mdc.appender2.log4j2.appender.file.layout.pattern = %c/%C [%p] %m%n

mdc.appender2.log4j2.rootLogger.level = info
mdc.appender2.log4j2.rootLogger.appenderRef.sift.ref = sift

# test for proper discovery of location

location.log4j2.appender.console.type = Console
location.log4j2.appender.console.name = console
location.log4j2.appender.console.layout.type = PatternLayout
location.log4j2.appender.console.layout.pattern = %logger/%class [%level] %message%n

location.log4j2.appender.file.type = File
location.log4j2.appender.file.name = file
location.log4j2.appender.file.fileName = target/logs-log4j2/location-file-appender.log
location.log4j2.appender.file.layout.type = PatternLayout
location.log4j2.appender.file.layout.pattern = %C | %M | %F | %L : [%p] %m%n

location.log4j2.rootLogger.level = info
location.log4j2.rootLogger.appenderRef.console.ref = console

location.log4j2.logger.my.name = my.logger
location.log4j2.logger.my.level = info
location.log4j2.logger.my.appenderRef.file.ref = file
location.log4j2.logger.my.additivity = false
# needed, because "category" through org.osgi.service.log.LogService is derived from Bundle-SymbolicName
location.log4j2.logger.probe.name = PaxExam-Probe
location.log4j2.logger.probe.level = info
location.log4j2.logger.probe.appenderRef.file.ref = file
location.log4j2.logger.probe.additivity = false

# test for SocketAppender

builtin.socket.log4j2.appender.console.type = Console
builtin.socket.log4j2.appender.console.name = console
builtin.socket.log4j2.appender.console.layout.type = PatternLayout
builtin.socket.log4j2.appender.console.layout.pattern = %logger/%class [%level] %message%n

builtin.socket.log4j2.appender.socket.type = Socket
builtin.socket.log4j2.appender.socket.name = socket
builtin.socket.log4j2.appender.socket.port = <will be set by test itself>
builtin.socket.log4j2.appender.socket.host = localhost
builtin.socket.log4j2.appender.socket.layout.type = PatternLayout
builtin.socket.log4j2.appender.socket.layout.pattern = %logger/%class [%level] %message%n

builtin.socket.log4j2.rootLogger.level = info
builtin.socket.log4j2.rootLogger.appenderRef.console.ref = console

builtin.socket.log4j2.logger.my.name = my.logger
builtin.socket.log4j2.logger.my.level = info
builtin.socket.log4j2.logger.my.appenderRef.socket.ref = socket
builtin.socket.log4j2.logger.my.additivity = false

# test for ListAppender from fragment bundle

builtin.list.log4j2.appender.console.type = Console
builtin.list.log4j2.appender.console.name = console
builtin.list.log4j2.appender.console.layout.type = PatternLayout
builtin.list.log4j2.appender.console.layout.pattern = %logger/%class [%level] %message%n

builtin.list.log4j2.appender.l.type = List
builtin.list.log4j2.appender.l.name = l

builtin.list.log4j2.rootLogger.level = info
builtin.list.log4j2.rootLogger.appenderRef.console.ref = console

builtin.list.log4j2.logger.my.name = my.logger
builtin.list.log4j2.logger.my.level = info
builtin.list.log4j2.logger.my.additivity = false
builtin.list.log4j2.logger.my.appenderRef.l.ref = l

# test for changing log levels which have to be reflected in JUL loggers

update.jul.log4j2.appender.console.type = Console
update.jul.log4j2.appender.console.name = console
update.jul.log4j2.appender.console.layout.type = PatternLayout
# http://logging.apache.org/log4j/2.x/manual/layouts.html#PatternLayout
update.jul.log4j2.appender.console.layout.pattern = %logger/%class [%level] %message%n

update.jul.log4j2.rootLogger.level = info
update.jul.log4j2.rootLogger.appenderRef.console.ref = console

update.jul.log4j2.logger.l1.name = l1
update.jul.log4j2.logger.l1.level = warn
update.jul.log4j2.logger.l2.name = l2
update.jul.log4j2.logger.l2.level = debug

# test(s) for meta properties related not to loggers/appenders/layouts/filters, but to
# Log4J2 itself
# org.apache.logging.log4j.core.config.AbstractConfiguration.setToDefault() checks
# final String levelName = PropertiesUtil.getProperties()
#                                        .getStringProperty(DefaultConfiguration.DEFAULT_LEVEL, defaultLevel.name())
# when there's no level configured for root logger. But we won't add rootLogger.level here, because it'd not get
# any appenders... We want to test only the meta here.

meta1.log4j2.status = trace
meta1.log4j2.verbose = true
meta1.log4j2.dest = out

meta2.log4j2.status = warn
meta2.log4j2.verbose = false
meta2.log4j2.dest = out

# test for turning on/off the locks

locks.org.ops4j.pax.logging.useLocks = true
locks.log4j2.rootLogger.level = debug

# test for JUL reconfiguration

jul.log4j2.appender.console.type = Console
jul.log4j2.appender.console.name = console
jul.log4j2.appender.console.layout.type = PatternLayout
jul.log4j2.appender.console.layout.pattern = %logger/%class [%level] %message%n

jul.log4j2.rootLogger.level = error
jul.log4j2.rootLogger.appenderRef.console.ref = console

# test for Markers

markers.log4j2.appender.console.type = Console
markers.log4j2.appender.console.name = console
markers.log4j2.appender.console.layout.type = PatternLayout
markers.log4j2.appender.console.layout.pattern = %c/%C [%p] (%marker | %markerSimpleName) %m%n
markers.log4j2.appender.console.filter.markers.type = MarkerFilter
markers.log4j2.appender.console.filter.markers.marker = pass

markers.log4j2.filter.markers.type = MarkerFilter
markers.log4j2.filter.markers.marker = pass

markers.log4j2.rootLogger.level = info
markers.log4j2.rootLogger.appenderRef.console.ref = console
