
    -------------------
    Pax Logging
    -------------------
    Niclas Hedhman
    -------------------
    2007 March 26
    -------------------


How to use Pax Logging in my bundles

    For a more step-by-step approach, look at Pierre Parrend's article
    {{{https://ops4j1.jira.com/wiki/spaces/paxlogging/pages/165/How+to+use+Pax+Logging}here}}.
    (This article needs update since the APIs are now folded into a single bundle.)
    
    First of all, look at the example in pax/logging/example, which is complete with both
    Jakarta Commons Logging API, Log4J Logger API and usage of 3rd party library that
    depends on Jakarta Commons Logging, namely the Jetty HTTP server.

    You need to;

    * ensure that log4j.jar, commons-logging.jar, and any other legacy API that you want
      to use, are NOT included in your bundle jars.

    * Import the logging APIs that are used in your client bundle. To ensure that your
      bundle's logging will get routed to Pax Logging Service, and not linked to another
      JCL or Log4J implementation (perhaps exported by a third-party bundle), you should
      specify the attribute provider=paxlogging and the directive mandatory:=provider (see below).

Manifest.MF

    You will need to import the legacy API you want to use. For instance, importing the
    Log4J and Jakarta Commons Logging;

+-------------------
Import-Package: org.apache.log4j; version="[1.2,1.3)"; provider=paxlogging; mandatory:=provider,
 org.apache.commons.logging; version="[1.0,1.1)"; provider=paxlogging; mandatory:=provider
+-------------------

    The <provider> is set to <mandatory> to ensure that your bundle doesn't manage to be wire to
    other exported legacy logging API packages. The inadvertent wiring to such packages are the biggest
    cause of problems to get Pax Logging working in user's systems.

Setting up the OSGi application

    The Pax Logging Servicebundle can
    be loaded and reloaded at any point in time, and the fallback of Pax Logging is a
    simple output to the system console.

    If the <Pax Logging API> bundle is not started before starting your client bundle, then
    Pax Logging will output log statements using a DefaultServiceLog, which uses the System.out
    console stream only. The default logger is set to DEBUG level.

API vs Service

    Pax Logging comes in two parts. The API is required and includes a simple default logger that
    output to the console if no Service is available. The Service is backed by a Log4J instance,
    and it is possible to upgrade the Service on-the-fly, without having your bundles stopped, thanks
    to the OSGi service layer and clever separation in <Pax Logging API>. However, when you do an
    upgrade and refresh of the <Pax Logging Service>, the bridging classes in the <Pax Logging API>
    will 'halt' for a brief moment, anticipating that an upgrade is in progress. This could affect
    the performance of your application. Version 1.1 is scheduled to allow other strategies.
    If the Service does not re-appear within the timeout period, the API will fallback to the
    default Logger once again.

Default Logger

    The log level of the Default Logger in the <Pax Logging API> can be set via the system property
    -Dorg.ops4j.pax.logging.DefaultServiceLog.level=<level>, It can also be set programmatically,
    by calling the static method

+--------------------
    public static void DefaultServiceLog.setLogLevel( String level )
+--------------------

    The valid level strings are; "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "NONE", and if
    any other string is used or null, the "DEBUG" level will be set.
    
Framework Events

    The Pax Logging Service automatically logs interesting framework events (e.g., bundle events, 
    service events) at DEBUG level.  This can be changed to a higher level via the
    system property -Dorg.ops4j.pax.logging.service.frameworkEventsLogLevel=<level>.  The valid
    level strings are; "DEBUG", "INFO", "WARN", "ERROR", and if any other string is used or null,
    the "DEBUG" level will be set.
